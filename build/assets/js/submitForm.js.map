{"version":3,"names":[],"mappings":"","sources":["submitForm.js"],"sourcesContent":["\"use strict\";\nimport modal from './modal.js';\n\nfunction submitForm() {\n    const _form = document.querySelector('#form-submit');\n    \n    _form.addEventListener('submit', (e) => {\n        e.preventDefault();\n         \n        let _name = document.querySelector('#name');\n        let _phone = document.querySelector('#phone');\n        let _info = document.querySelector('#info');\n\n        \n\n        let message = {\n            name: _name.value,\n            phone: _phone.value,\n            info: _info.value\n        }            \n        \n        sendMessage(message)\n    \n        _name.value = \"\";\n        _phone.value = \"\";\n        _info.value = \"\";\n        \n    })\n    \n};\nfunction sendMessage(message) {\n    const bot = new Bot(\"6379245837:AAFfp8FBOAPTK7sUQHcdZVwpYC5s-1NT7dY\", \"1715714284\");\n    modal();\n    bot.sendMessage(JSON.stringify(message), null, null, true)\n        //.then(res => {\n          \n        //})\n        .catch(err => alert(err))\n\n\n    \n}\nclass TelegramBotSetup {\n    constructor(token) {\n      this.token = token;\n      this.requestUrl = 'https://api.telegram.org/bot';\n    }\n  \n    api(type, method, body) {\n      return new Promise((resolve, reject) => {\n        fetch(this.requestUrl + this.token + type, {\n          method: method,\n          body: body\n        }).then(res => {\n          resolve(res.json())\n        }).catch(err => {\n          reject(err)\n        })\n      })\n    }\n  }\n  \n  class Bot extends TelegramBotSetup {\n    constructor(botToken, defaultChatID) {\n      super(botToken);\n      this.dcid = defaultChatID;\n    }\n  \n    \n  \n    async getUpdates() {\n      try {\n        const result = await this.api('/getUpdates', 'GET')\n        return await result\n      } catch(e) {\n        return await e\n      }\n    }\n  \n    async getMe() {\n      try {\n        const result = await this.api('/getMe', 'GET')\n        return await result\n      } catch(e) {\n        return await e\n      }\n    }\n  \n    async sendMessage(text, chatID, parseMode, disableNotification) {\n      try {\n        const result = await this.api(`/sendMessage?text=${text}&chat_id=${chatID ? chatID : this.dcid}&parse_mode=${parseMode ? parseMode : 'html'}&disable_notification=${disableNotification ? disableNotification : false}`, 'GET')\n        return await result\n      } catch(e) {\n        return await e\n      }\n    }\n  };\n    \nexport default submitForm;\n"],"file":"submitForm.js"}